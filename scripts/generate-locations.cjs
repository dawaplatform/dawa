const https = require('https');
const path = require('path');
const prettier = require('prettier');
const { chain } = require('stream-chain');
const { parser } = require('stream-json');
const { streamArray } = require('stream-json/streamers/StreamArray.js');
const writeFileAtomic = require('write-file-atomic');

/**
 * Inline map function—no more importing your TS util.
 * @param {{ id: string, name: string, district?: string }} rec
 * @returns {{ name: string, count: number }}
 */
function toLocation(rec) {
  return {
    name: titleCase(rec.name),
    count: Number(rec.id),
  };
}

function titleCase(str) {
  return str
    .toLowerCase()
    .split(' ')
    .map((word) => {
      if (word.length === 0) return '';
      return word[0].toUpperCase() + word.slice(1);
    })
    .join(' ');
}

async function main() {
  const rawUrl =
    'https://raw.githubusercontent.com/paulgrammer/ug-locale/main/districts.json';
  const outPath = path.join(__dirname, '..', 'src', 'data', 'locations.tsx');

  const locations = [];

  // Stream-parse remote JSON → map → collect
  await new Promise((resolve, reject) => {
    https
      .get(rawUrl, (res) => {
        if (res.statusCode !== 200) {
          reject(new Error(`HTTP ${res.statusCode}`));
          res.resume();
          return;
        }
        chain([
          res,
          parser(),
          streamArray(),
          (chunk) => toLocation(chunk.value),
        ])
          .on('data', (loc) => locations.push(loc))
          .on('end', resolve)
          .on('error', reject);
      })
      .on('error', reject);
  });

  // Build the TSX module text
  const rawModule = `// AUTO-GENERATED by scripts/generate-locations.cjs
export const locations = ${JSON.stringify(locations, null, 2)};
`;

  // Format with Prettier
  const formatted = await prettier.format(rawModule, {
    parser: 'typescript',
    filepath: outPath,
  });

  // Atomically overwrite your file (no duplicates, no partial writes)
  await writeFileAtomic(outPath, formatted);

  console.log(`✓ Wrote ${locations.length} locations to ${outPath}`);
}

// If run directly, execute main()
if (require.main === module) {
  main().catch((err) => {
    console.error(err);
    process.exit(1);
  });
}
